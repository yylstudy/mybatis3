<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yyl.dao.StudentMapper">
    <resultMap id="student" type="com.yyl.bean.Student">
        <id column="id" property="id"/>
        <result column="cnname" property="cnname"/>
        <result column="sex" property="sex" typeHandler="com.yyl.typeHandler.SexTypeHandler"/>
        <result column="sex" property="sexEnum" />
        <result column="note" property="note"/>
    </resultMap>
    <sql id="student_sql" databaseId="mysql">
        id,cnname,sex,note
    </sql>
    <resultMap id="studentInfo" type="com.yyl.bean.Student">
        <id column="id" property="id"/>
        <result column="cnname" property="cnname"/>
        <result column="sex" property="sex" typeHandler="com.yyl.typeHandler.SexTypeHandler"/>
        <result column="sex" property="sexEnum" />
        <result column="note" property="note"/>
<!--        一对一查询需要使用到Grade-->
        <association property="grade" javaType="com.yyl.bean.Grade">
            <id property="id" column="gradeId"/>
            <result property="name" column="gradeName"/>
        </association>
<!--        嵌套集合这需要使用到 ofType关键字-->
        <collection property="courseList" ofType="com.yyl.bean.Course">
            <id property="id" column="courseId"/>
            <result property="name" column="courseName"/>
        </collection>

    </resultMap>

    <resultMap id="repeatStudentInfo" type="com.yyl.bean.Student">
        <id column="cnname" property="cnname"/>
        <result column="id" property="id"/>
        <result column="sex" property="sex" typeHandler="com.yyl.typeHandler.SexTypeHandler"/>
        <result column="sex" property="sexEnum" />
        <result column="note" property="note"/>
        <!--        一对一查询需要使用到Grade-->
        <association property="grade" javaType="com.yyl.bean.Grade">
            <result property="id" column="gradeId"/>
            <result property="name" column="gradeName"/>
        </association>
        <!--        嵌套集合这需要使用到 ofType关键字-->
        <collection property="courseList" ofType="com.yyl.bean.Course">
            <result property="id" column="courseId"/>
            <result property="name" column="courseName"/>
        </collection>

    </resultMap>

    <select id="findStudentById" resultMap="student">
        select id,cnname,sex,note from student where id=#{studentId}
    </select>

<!--    可以看到这里会优先执行databaseId匹配的，如果找不到databaseId匹配的就查找databaseId缺省的-->
<!--    所以，第一个和第二个都能正确的查询-->
    <select id="findStudentByIdForOracleOrMySql" databaseId="mysql" resultMap="student">
        select id,cnname,sex,'5' note from ${tableName} where id=#{studentId}
    </select>
    <select id="findStudentByIdForOracleOrMySql"  resultMap="student">
        select id,cnname,sex,'5' note from student where id=#{studentId}
    </select>
    <select id="findStudentByIdForOracleOrMySql" databaseId="oracle" resultMap="student">
        select id,cnname,sex,'6' note from student where id=#{studentId}
    </select>

    <select id="findAllStudentInfo" resultMap="repeatStudentInfo">
        select a.id,a.cnname,a.sex,a.note,b.student_id gradeId,b.name gradeName,
        d.id courseId,d.name courseName from student a
        left join grade b on a.id=b.student_id
        left join student_course c on a.id = c.student_id
        left join course d on c.course_id = d.id
    </select>

    <select id="findStudentInfo" resultMap="studentInfo">
        select a.id,a.cnname,a.sex,a.note,b.student_id gradeId,b.name gradeName,
        d.id courseId,d.name courseName from student a
        left join grade b on a.id=b.student_id
        left join student_course c on a.id = c.student_id
        left join course d on c.course_id = d.id
         where a.id=#{studentId}
    </select>
    <!--mybatis二级缓存配置，因为要序列化，所以mybatis的javaBean都需要实现Serializable接口，默认情况下
    1）该mapper中的所有selct语句将会被缓存
    2）所有insert、update、delete将刷新缓存
    3）缓存会使用默认的Least Recently Used算法来回收
    4）根据时间表缓存不会以任何时间顺序来刷新

    cache 有以下参数
    1.eviction:代表缓存的回收策略，目前mybatis提供一下策略
    1）LRU 移除最长时间不用的对象
    2）FIFO 先进先出 按照对象进入缓存的顺序来移除
    3）SOFT 软引用，移除基于垃圾回收器状态和软引用规则的对象
    4）WEAK 弱引用 移除基于垃圾回收器状态和弱引用规则的对象
    2.flushInterval：刷新间隔时间，单位是毫秒，如果不配置就是表示当发生dml操作的时候才去刷新
    3.size:代表缓存最多存储的对象
    4：readonly：缓存的数据只能读取不能修改 -->
<!--    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024" />-->
    <cache type="com.yyl.cache.RedisCache" />

    <select id="findStudentByDynamicSqlTest" parameterType="com.yyl.bean.Student" resultMap="student">
        select id,cnname,sex,note from student where 1 = 1
        <if test="id!=null">
            and id=#{id}
        </if>
        <if test="cnname!=null">
            and cnname=#{cnname}
        </if>

    </select>
    <select id="findStudentByDynamicSqlChoose" parameterType="com.yyl.bean.Student" resultMap="student">
        select id,cnname,sex,note from student where 1 = 1
        <choose>
            <when test="id!=null and id!='' ">
                and id=#{id}
            </when>
            <when test="cnname!=null">
                and cnname=#{cnname}
            </when>
            <otherwise>
                and 1=2
            </otherwise>
        </choose>

    </select>
    <select id="findStudentByDynamicSqlWhere" parameterType="com.yyl.bean.Student" resultMap="student">
        select id,cnname,sex,note from student
        <where>
            <if test="id!=null and id !='' ">
                and id=#{id}
            </if>
            <if test="cnname!=null">
                and cnname=#{cnname}
            </if>
        </where>
    </select>

    <select id="findStudentByDynamicSqlTrimWhere" parameterType="com.yyl.bean.Student" resultMap="student">
        select id,cnname,sex,note from student
        <trim prefix="where" prefixOverrides="and |or">
            <if test="id!=null">
                and id=#{id}
            </if>
            <if test="cnname!=null">
                and cnname=#{cnname}
            </if>
        </trim>
    </select>

    <update id="updateStudentByDynamicSqlTrimSet" parameterType="com.yyl.bean.Student" >
       update student
        <trim prefix="set" suffixOverrides=",">
            <if test="cnname!=null">
                 cnname=#{cnname},
            </if>
            <if test="note!=null">
                 note=#{note},
            </if>
        </trim>
        where id=#{id}
    </update>

    <select id="queryBatch" resultMap="student">
        select id,cnname,sex,note from student
        <where>
            <if test="list!=null and list.size()>0">
                id in
                <foreach collection="list" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <select id="findStudentByIdAndNote" resultMap="student">
        select id,cnname,sex,note from student where id=#{studentId} and note=#{note}
    </select>
    <select id="findPageStudent" resultMap="student">
        select id,cnname,sex,note from student where  sex=#{sex}
    </select>

    <select id="findDynamicPageStudent" resultMap="student">
        select id,cnname,sex,note from student
        <where>
            <if test="ids!=null and ids.size()>0">
                id in
                <foreach collection="ids" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findStudentForGithubPageHelper" resultMap="student">
        select id,cnname,sex,note from student
        <where>
            <if test="ids!=null and ids.size()>0">
                id in
                <foreach collection="ids" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="com.yyl.bean.Student">
        insert into student(id,cnname,sex,note) values(#{id},#{cnname},#{sex},#{note})
    </insert>
</mapper>